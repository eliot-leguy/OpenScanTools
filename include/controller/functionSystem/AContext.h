#ifndef A_CONTEXT_H
#define A_CONTEXT_H

#define FUNCLOG Logger::log(LoggerMode::FunctionLog)
#define LOGENDL Logger::endl

#include <cstdint>
typedef uint32_t ContextId;

#define INVALID_CONTEXT_ID 0xFFFFFFFF

class IMessage;

enum class ContextType
{
	none,
	tagCreation,
	tagDuplication,
	tagMove,
	tagDeletion,
	templateModification,
	templateListModification,
	scanImport,
	scanConversion,
	scanClipping,
	examine,
	viewPointAnimation,
	randomColorOptimizer,
	saveCloseCreateProject,
	saveCloseProject,
	saveCloseLoadProject,
	saveQuitProject,
	saveProject,
	beamBending,
	columnTilt,
	fitCylinder,
	simpleMeasure,
	pointsMeasure,
	pointMeasure,
	pointCreation,
	Sphere,
	Slab2Click,
	Slab1Click,
	ClicsSphere4,
	pointToCylinder,
	clippingBoxCreation,
	clippingBoxAttached3Points,
	clippingBoxAttached2Points,
	boxDuplication,
	pointCloudObjectCreation,
	pointCloudObjectDuplication,
	meshObjectCreation,
	stepSimplification,
	meshObjectDuplication,
	meshDistance,
	bigCylinderFit,
	pointToPlane,
	pointToPlane3,
	cylinderToPlane,
	cylinderToPlane3,
	cylinderToCylinder,
	experiment,
	exportPC,
	exportSubProject,
	deletePoints,
	multipleCylinders,
	cylinder2ClickExtend,
	testCylinder,
	exportDxf,
	exportCSV,
	exportStep,
	exportOpenScanTools,
	exportObj,
	exportFbx,
	importOSTObjects,
	linkFileOSTObjects,
	alignView2P,
	alignView3P,
	alignViewBox,
	pipeDetectionConnexion,
	pipePostConnexion,
	beamDetection,
	viewpointCreation,
	viewpointUpdate,
	planeConnexion,
	planeDetection,
	setOfPoints,
	autoGenerateData,
	peopleRemover,
	findScan,
	fitTorus,
	exportVideoHD,
	trajectory,
	moveManip,
	manipulateObjects
};

enum class ContextState
{
	abort, // Must be return when the function has been stopped without results or not all the results expected.
	ready_for_using, // Must be used when the launch method can be used.
	waiting_for_result, // Must be used when sub process results are required by the context.
	waiting_for_input, // Must be used when inputs are required by the context.
	running, // Must be use when the algorithm is running.
	//processing_result, // Must be quickly use when processing function results.
	done // Must be used when everythings is fine and over.
};

class Controller;

class AContext
{
public:
	AContext(const ContextId& id);
	virtual ~AContext() {};

	virtual ContextState start(Controller& controller) = 0;
	virtual ContextState launch(Controller& controller) = 0;
	virtual ContextState feedMessage(IMessage* message, Controller& controller) = 0;
	virtual ContextState abort(Controller& controller);
	virtual ContextState validate(Controller& controller);
	virtual bool canAutoRelaunch() const = 0;

	virtual void setState(ContextState state) final;
	virtual ContextState getState() const final;
	virtual ContextId getId() const final;

	virtual ContextType getType() const = 0;
protected:
	ContextState	m_state;
	const ContextId	m_id;
};

#endif
