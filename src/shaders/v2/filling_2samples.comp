#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rgba8) uniform readonly image2DMS rawColorImage;
layout(set = 0, binding = 1) uniform sampler2DMS rawDepthImage;
layout(set = 1, binding = 2, rgba8) uniform writeonly image2D outputImage;

layout(push_constant) uniform PC {
   layout(offset = 0) float nearZ;
   layout(offset = 4) float farZ;
   layout(offset = 8) int width;
   layout(offset = 12) int height;
   layout(offset = 16) float fovx;
   layout(offset = 20) float fovy;
} pc;

vec4 fillIn(in vec4[9] color, in float[9] depth, in int texelThreshold)
{
   float nearest = depth[1];
   for (int i = 2; i < 9; ++i)
      nearest = min(nearest, depth[i]);

   float deltaDepth = pc.fovx / pc.width * nearest * 6.0;
   if (depth[0] < nearest + deltaDepth)
      return color[0];

   vec4 result = vec4(0.0, 0.0, 0.0, 0.0);

   int validTexel = 0;
   for (int i = 1; i < 9; ++i)
   {
      if (depth[i] < nearest + deltaDepth)
      {
         validTexel++;
         result += color[i];
      }
   }

   //return (validTexel >= texelThreshold) ? result / validTexel : color[0];
   return (validTexel >= texelThreshold) ? vec4(1.0, 0.0, 0.0, 1.0) : color[0];
}

struct ImageData 
{
   vec4 color[9];
   float depth[9];
} imageData;

int bindingIJ[9] = {
   5, 1, 6,
   2, 0, 3,
   7, 4, 8
};

void main() 
{
   int n = -1;
   for (int i = -1; i < 2; ++i)
   {
      for (int j = -1; j < 2; ++j)
      {
         ++n;
         int m = bindingIJ[n];
         ivec2 iUV = ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j);
         vec4 sumColor = vec4(0.0, 0.0, 0.0, 0.0);
         for (int s = 0; s < 2; ++s)
            sumColor += imageLoad(rawColorImage, iUV, s);
         imageData.color[m] = sumColor / 4.0;
         float rawDepth = texelFetch(rawDepthImage, iUV, 0).r;
         imageData.depth[m] = pc.farZ * pc.nearZ / (pc.farZ - (pc.farZ - pc.nearZ) * rawDepth);
      }
   }

   imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), fillIn(imageData.color, imageData.depth, 5));
}
